using Education.interfaces;
using System;

namespace Education
{
    class OOP_PrincipleTraining : ITask
    {
        public static void OutOOP_Pillars()
        {
            Console.WriteLine("В объектно-ориентированном программировании(ООП) есть 6 основых принципов:\n" +
                "1.Абстракция - выделение главных, наиболее значимых характеристик предмета и отбрасывание незначительных.\n" +
                "2.Инкапсуляция - контроль за изменением поведения и состояния объекта.\n" +
                "3.Наследование - механизм, который позволяет унаследовать поля и методы родительского объекта\n" +
                "(позаимствовать его функционал)\n" +
                "4.Полиморфизм - изменение поведения объекта в зависимости от того, что этот объект из себя представляет\n" +
                "5.Повторное использование кода - заключается в написание методов таким образом,\n" +
                "чтобы их можно было использовать повторно\n" +
                "6.Посылка сообщений - обращение(вызов) методов или свойств объекта\n"
                );
            Console.WriteLine(
                "Какие бывают виды отношения между объектами:\n" +
                "Ассоциация(Has A) - означает отношение между классами объектов,\n" +
                "которое позволяет одному экземпляру объекта вызвать другой, чтобы выполнить действие от его имени.\n" +
                "Композиция(Has A) - означает инициализация класса родителя объектами типа которые в нем содержаться\n" +
                "Агрегация(Has A) - методика создания нового класса из уже существующих классов путём включения экземпляров на равноправной основе.\n" +
                "Делегирование - использование в программировании одного объекта другим с целью реализации тех или других функций.\n" +
                "Статический полиморфизм - Изменение реализации метода в зависимости от передаваемых параметров,\n" +
                "при одинаковой сигнатуре. Пример: перегрузка методов, или операторов\n" +
                "Динамический полиморфизм - это механизм, с помощью которого можно определить несколько методов с одинаковыми именами\n" +
                "и сигнатурами в суперклассе и подклассе. Пример: абстрактные классы и виртуальные методы\n");
        }
    }
}
